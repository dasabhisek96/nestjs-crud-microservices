"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationStatus = exports.HttpJsonClientWx = exports.HttpJsonClient = void 0;
var HttpJsonClient = (function () {
    function HttpJsonClient() {
        this.token = "";
        this.get_options = {
            method: 'GET',
            headers: {
                'content-type': 'application/json; charset=utf-8',
                'Accept': 'application/json',
                'X-Requested-With': 'Fetch'
            },
            credentials: 'include'
        };
    }
    HttpJsonClient.prototype.http_get = function (url) {
        var _this = this;
        if (this.token.length > 0) {
            this.get_options.headers["X-Auth-Token"] = this.token;
        }
        return fetch(url, this.get_options).then(function (response) {
            if (response.ok) {
                return response.json().then(function (res) {
                    return res;
                }).catch(function () {
                    Promise.resolve(null);
                });
            }
            else if (response.status == 401) {
                if (_this.auth_faild) {
                    _this.auth_faild(url);
                }
                Promise.reject(403);
            }
            else if (response.status == 200) {
                console.log("正确返回");
                Promise.resolve(null);
            }
            else {
                Promise.reject("服务器错误：" + response.status + "," + response.statusText);
            }
        });
    };
    HttpJsonClient.prototype.http_post = function (url, body) {
        return this.do_http_post(url, body);
    };
    HttpJsonClient.prototype.http_search = function (url, body) {
        return this.do_http_post(url, body);
    };
    HttpJsonClient.prototype.http_post_form = function (url, formData) {
        var form_options = {
            method: 'POST',
            headers: {
                'Accept': 'application/json'
            },
            body: formData
        };
        if (this.token.length > 0) {
            form_options.headers["X-Auth-Token"] = this.token;
        }
        return fetch(url, form_options).then(function (response) {
            if (response.ok) {
                return response.json();
            }
            else if (response.status == 403) {
                Promise.reject("权限不够或登陆超时！");
            }
            else if (response.type === 'opaque' && response.status == 0) {
                console.log("文件上传总是0");
                Promise.resolve();
            }
            else {
                Promise.reject("服务器错误：" + response.status + "," + response.statusText);
            }
        });
    };
    HttpJsonClient.prototype.do_http_post = function (url, body) {
        var _this = this;
        var b;
        if ((typeof body) == "string") {
            b = body;
        }
        else {
            b = JSON.stringify(body);
        }
        var options = {
            method: 'POST',
            headers: {
                'content-type': 'application/json; charset=utf-8',
                'Accept': 'application/json',
                'X-Requested-With': 'Fetch'
            },
            credentials: 'include',
            body: b
        };
        if (this.token.length > 0) {
            options.headers["X-Auth-Token"] = this.token;
        }
        return fetch(url, options).then(function (response) {
            var token = response.headers.get("X-Auth-Token");
            if (token) {
                console.log("有Token", token);
                if (token != _this.token) {
                    console.log("更新Token");
                    _this.token = token;
                }
            }
            if (response.ok) {
                return response.json();
            }
            else if (response.status == 403) {
                Promise.reject("权限不够或登陆超时！");
            }
            else {
                Promise.reject("服务器错误：" + response.status + "," + response.statusText);
            }
        });
    };
    return HttpJsonClient;
}());
exports.HttpJsonClient = HttpJsonClient;
var HttpJsonClientWx = (function () {
    function HttpJsonClientWx() {
    }
    Object.defineProperty(HttpJsonClientWx, "instance", {
        get: function () {
            if (HttpJsonClient._instance == null) {
                HttpJsonClient._instance = new HttpJsonClient();
            }
            return HttpJsonClient._instance;
        },
        enumerable: false,
        configurable: true
    });
    HttpJsonClientWx.prototype.wx_http_get = function (url, data) {
        var resolve = null;
        var reject = null;
        var promise = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
        });
        var self = this;
        var header = {
            'content-type': 'application/json',
            'X-Auth-Token': this.token
        };
        wx.request({
            url: url,
            data: data,
            header: header,
            success: function (res) {
                if (self.token == null || self.token.length == 0) {
                    self.token = res.header["X-Auth-Token"];
                }
                resolve(res);
                console.log(res.data);
            },
            error: function (err) {
                reject(err);
            }
        });
        return promise;
    };
    HttpJsonClientWx.prototype.wx_http_post = function (url, data) {
        console.log("POST...");
        var resolve = null;
        var reject = null;
        var promise = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
        });
        var self = this;
        var header = {
            'content-type': 'application/json',
            'X-Auth-Token': this.token
        };
        wx.request({
            url: url,
            data: data,
            header: header,
            method: "POST",
            success: function (res) {
                if (self.token == null || self.token.length == 0) {
                    self.token = res.header["X-Auth-Token"];
                }
                resolve(res);
                console.log(res.data);
            },
            error: function (err) {
                reject(err);
            }
        });
        return promise;
    };
    HttpJsonClientWx.prototype.wx_download = function (url) {
        var resolve = null;
        var reject = null;
        var promise = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
        });
        var header = {
            'X-Auth-Token': this.token
        };
        wx.downloadFile({
            url: url,
            header: header,
            success: function (res) {
                resolve(res);
            },
            fail: function (err) {
                reject(err);
            }
        });
        return promise;
    };
    return HttpJsonClientWx;
}());
exports.HttpJsonClientWx = HttpJsonClientWx;
var OperationStatus = (function () {
    function OperationStatus() {
    }
    return OperationStatus;
}());
exports.OperationStatus = OperationStatus;
