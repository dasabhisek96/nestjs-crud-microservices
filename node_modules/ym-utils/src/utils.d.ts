export declare class HttpJsonClient {
    auth_faild: any;
    private get_options;
    http_get(url: any): Promise<any>;
    http_post(url: string, body: any): Promise<OperationStatus>;
    http_search(url: string, body: any): Promise<any>;
    http_post_form(url: string, formData: any): Promise<OperationStatus>;
    private do_http_post;
}
export declare class Counter {
    is_counting: boolean;
    count: number;
    private timer;
    start(seconds: number): void;
    private handler;
}
export declare class OperationStatus {
    ok: boolean;
    msg: string;
    handled: boolean;
    payload: any;
}
export declare class DateUtils {
    static getMonday(d: Date): Date;
    static getTodayStart(): Date;
    static getYesterdayStart(): Date;
    static getLastMonthStart(): Date;
    static getThisMonthStart(): Date;
    static getFirstDayOfMonth(date: Date): Date;
    static format_with_dash(date: Date): string;
    static addDays(date: Date, days: number): Date;
}
export declare class Utils {
    private static _cache;
    static get Cache(): Map<string, any>;
    static copy_object(a: any, b: any): any;
    static removeArrayItem(arr: Array<any>, item: any): void;
    static removeFromArray(arr: Array<any>, func: any): void;
    static triger_change(el: string, change: Function): void;
    static upDigit(n: any): string;
    static format_date(d: number): string;
    static replace(str: string, obj: any): string;
    static toMoneyString(money: number): string;
    static replaceOne(str: string, obj: any): string;
    static urlToObject(): any;
    static queryToObject(str: string): any;
    static isArray(o: any): boolean;
    static formatPassTime(startTime: any): string;
    collapsible(n: string): void;
    resizeImage(settings: any): Promise<unknown>;
    static checkIdcard(code: any): boolean;
    formatDate(val: any, pattern: any): any;
    static countDown(end_: string): string;
}
