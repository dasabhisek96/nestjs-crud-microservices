"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItem = exports.Menu = exports.MenuH = void 0;
var tab_router_js_1 = require("../tab_router.js");
var aurelia_framework_1 = require("aurelia-framework");
var MenuH = (function () {
    function MenuH(r, t) {
        this.option = {
            nav_color: 'grey darken-4',
            nav_text_color: 'white-text',
            logo: 'img/caredaily.png',
            subnav_color: 'grey darken-3',
            subnav_text_color: 'white-text',
            icon_color: 'color:#bdbdbd'
        };
        console.log("constructor...");
        this.router = r;
        this.taskQueue = t;
    }
    MenuH.inject = function () { return [tab_router_js_1.TabRouter, aurelia_framework_1.TaskQueue]; };
    ;
    MenuH.prototype.activate = function () {
        console.log("sidebar activate");
    };
    MenuH.prototype.menusChanged = function () {
        console.log("menus changed...", this.menus);
        this.taskQueue.queueMicroTask(function () {
            console.log(M);
        });
    };
    MenuH.prototype.attached = function () {
        console.log("sidebar attached");
    };
    MenuH.prototype.configure = function (routes) {
        console.log(routes);
        var root_menus = [];
        routes.forEach(function (nav) {
            if (nav.nav) {
                if (nav.settings) {
                    if (nav.settings.menu) {
                        var item = new MenuItem();
                        item.title = nav.title;
                        item.url = nav.moduleId;
                        item.name = nav.name;
                        var m = root_menus.find(function (it) { return it.title == nav.settings.menu; });
                        if (m) {
                            m.sub.push(item);
                        }
                        else {
                            var rm = new Menu();
                            rm.title = nav.settings.menu;
                            rm.url = "javascript:;";
                            rm.sub.push(item);
                            root_menus.push(rm);
                        }
                    }
                    else {
                        var rm = new Menu();
                        rm.title = nav.title;
                        rm.url = "#" + nav.name;
                        root_menus.push(rm);
                    }
                }
            }
        });
        this.menus = root_menus;
        this.menusChanged();
    };
    MenuH.prototype.set_option = function (option) {
        this.option.nav_color == undefined ? this.option.nav_color : option.nav_color;
        this.option.nav_text_color == undefined ? this.option.nav_text_color : option.nav_text_color;
        this.option.logo == undefined ? this.option.logo : option.logo;
        this.option.subnav_color == undefined ? this.option.subnav_color : option.subnav_color;
        this.option.subnav_text_color == undefined ? this.option.subnav_text_color : option.subnav_text_color;
        this.option.icon_color == undefined ? this.option.icon_color : option.icon_color;
    };
    MenuH.prototype.open_tab = function (nav) {
        this.router.navigate(nav.name, null);
    };
    MenuH = __decorate([
        aurelia_framework_1.customElement('menu-h'),
        __metadata("design:paramtypes", [Object, Object])
    ], MenuH);
    return MenuH;
}());
exports.MenuH = MenuH;
var Menu = (function () {
    function Menu() {
        this.sub = [];
    }
    return Menu;
}());
exports.Menu = Menu;
var MenuItem = (function () {
    function MenuItem() {
    }
    return MenuItem;
}());
exports.MenuItem = MenuItem;
