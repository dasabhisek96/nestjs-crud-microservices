"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route = exports.TabPage = exports.TabRouter = void 0;
var aurelia_path_1 = require("aurelia-path");
var aurelia_framework_1 = require("aurelia-framework");
var TabRouter = (function () {
    function TabRouter(tq) {
        this.tabs = [];
        this.navigation = [];
        this.page_index = 1;
        this.task_queue = tq;
    }
    TabRouter.inject = function () { return [aurelia_framework_1.TaskQueue]; };
    ;
    TabRouter.prototype.find_query = function (hash) {
        var has_param = hash.indexOf("?");
        var q = "";
        if (has_param >= 0) {
            q = hash.substring(hash.indexOf("?") + 1, hash.length);
        }
        return q;
    };
    TabRouter.prototype.configure = function (navs) {
        var _this = this;
        window.addEventListener('hashchange', function (e) {
            console.log('hash changed', e);
            var q = _this.find_query(location.hash);
            var param = null;
            if (q != "") {
                param = aurelia_path_1.parseQueryString(q);
            }
            console.log("HashChange:", q);
            var route = _this.find_route_by_hash(location.hash);
            if (route) {
                _this.navigate(route.name, param);
            }
        });
        this.navigation = navs;
        this.init();
    };
    TabRouter.prototype.init = function () {
        var home = this.navigation.find(function (nav) { return nav.name == 'home'; });
        var old_hash = location.hash;
        var param = this.find_param_by_hash(old_hash);
        var init_page = this.find_route_by_hash(old_hash);
        if (home) {
            this.navigate_not_change_hash(home.name, param);
        }
        if (init_page) {
            if (init_page != home) {
                this.navigate(init_page.name, param);
            }
        }
    };
    TabRouter.prototype.find_tab_by_hash = function (hash) {
        return this.tabs.find(function (v) { return v.hash == hash; });
    };
    TabRouter.prototype.find_param_by_hash = function (hash) {
        var q = this.find_query(hash);
        var param = null;
        if (q != "") {
            param = aurelia_path_1.parseQueryString(q);
        }
        return param;
    };
    TabRouter.prototype.find_route_by_hash = function (hash) {
        console.log("hash:" + hash);
        var has_param = hash.indexOf("?");
        var nav_name = null;
        if (has_param >= 0) {
            nav_name = hash.substring(hash.indexOf("#") + 1, hash.indexOf("?"));
        }
        else {
            nav_name = hash.substring(hash.indexOf("#") + 1, hash.length);
        }
        var nav = this.navigation.find(function (v) { return v.name == nav_name; });
        return nav;
    };
    TabRouter.prototype.navigate_not_change_hash = function (nav_name, param) {
        var tab = this.do_navigate(nav_name, param);
        this.tabs.forEach(function (v) { return v.active = false; });
        tab.active = true;
    };
    TabRouter.prototype.do_navigate = function (nav_name, param) {
        console.log("导航：" + nav_name);
        console.log("参数：", param);
        var nav = this.navigation.find(function (v) { return v.name == nav_name; });
        var hash = nav_name == "" ? "" : "#" + nav.name;
        if (param != null) {
            var q = aurelia_path_1.buildQueryString(param);
            if (q) {
                if (q.length > 0) {
                    hash += "?" + q;
                }
            }
        }
        var tab = this.tabs.find(function (v) { return v.hash == hash; });
        if (!tab) {
            tab = new TabPage();
            tab.route_name = nav_name;
            tab.page_id = tab.route_name + "_" + this.page_index;
            this.page_index++;
            tab.hash = hash;
            tab.param = param;
            tab.active = true;
            tab.allow_close = true;
            if (nav.settings) {
                if (nav.settings.is_home) {
                    tab.allow_close = false;
                }
            }
            tab.url = nav.moduleId;
            tab.title = nav.title;
            this.tabs.push(tab);
        }
        return tab;
    };
    TabRouter.prototype.refresh_all = function () {
        var _this = this;
        console.log("refres...");
        var temp = this.tabs;
        this.tabs = [];
        this.task_queue.queueTask(function () {
            _this.tabs = temp;
        });
    };
    TabRouter.prototype.get_current_tab = function () {
        return this.tabs.find(function (it) { return it.active; });
    };
    TabRouter.prototype.navigate = function (nav_name, param) {
        var tab = this.do_navigate(nav_name, param);
        this.select(tab);
    };
    TabRouter.prototype.select = function (tab) {
        this.tabs.forEach(function (v) { return v.active = false; });
        tab.active = true;
        if (tab.selected) {
            tab.selected(tab);
        }
        location.hash = tab.hash;
    };
    TabRouter.prototype.close = function (tab) {
        var index = this.tabs.indexOf(tab);
        this.tabs.splice(index, 1);
        if (tab.active) {
            var next_active = this.tabs[index - 1];
            next_active.active = true;
            location.hash = next_active.hash;
        }
    };
    return TabRouter;
}());
exports.TabRouter = TabRouter;
var TabPage = (function () {
    function TabPage() {
    }
    return TabPage;
}());
exports.TabPage = TabPage;
var Route = (function () {
    function Route() {
    }
    return Route;
}());
exports.Route = Route;
